import os
import time
import base64
import random
import datetime as dt
import requests

# ---- Timezone handling ----
try:
    from zoneinfo import ZoneInfo
    KYIV_TZ = ZoneInfo("Europe/Kyiv")
except Exception:
    from datetime import timezone, timedelta
    KYIV_TZ = timezone(timedelta(hours=3))  # fallback to UTC+3

# ====== CONFIG ======
BOT_TOKEN = os.getenv("BOT_TOKEN")              # required
CHANNEL_ID = os.getenv("CHANNEL_ID")            # required: @channel or -100...
OPENAI_KEY = os.getenv("OPENAI_KEY")            # required
MODEL_NAME = os.getenv("MODEL_NAME", "gpt-4o-mini")
IMAGE_MODEL = os.getenv("IMAGE_MODEL", "gpt-image-1")
SCHEDULE = ["11:00", "15:00", "16:04", "17:00", "19:00", "21:00"]  # Kyiv
IMAGES_PER_DAY = 3                               # exactly 3 image posts per day
RUN_NOW = os.getenv("RUN_NOW") == "1"            # send one post immediately for testing
# ====================

# Lazy OpenAI client
_client = None
def client():
    global _client
    if _client is None:
        from openai import OpenAI
        _client = OpenAI(api_key=OPENAI_KEY)
    return _client

# 30+ diverse directions for topics
TOPIC_DIRECTIONS = [
    "–ü–æ—Ä–∞–¥–∏ –∑ Photoshop –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –±–∞–Ω–µ—Ä—ñ–≤",
    "–î–æ–±—ñ—Ä–∫–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —à—Ä–∏—Ñ—Ç—ñ–≤ –¥–ª—è –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤",
    "–õ–∞–π—Ñ—Ö–∞–∫–∏ Figma –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É–≤–∞–Ω–Ω—è",
    "–ö–æ–º–ø–æ–∑–∏—Ü—ñ—è —Ç–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—è —É –∫—Ä–µ–∞—Ç–∏–≤–∞—Ö",
    "–ö–æ–ª—ñ—Ä–Ω—ñ —Å—Ö–µ–º–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ç–∞ –∞–∫—Ü–µ–Ω—Ç–∏",
    "–¢–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏ –¥–∏–∑–∞–π–Ω–µ—Ä—ñ–≤-–ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤ —ñ —è–∫ —ó—Ö —É–Ω–∏–∫–∞—Ç–∏",
    "–°—ñ—Ç–∫–∏, –º–æ–¥—É–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ 8pt-—Å–∏—Å—Ç–µ–º–∞",
    "–í—ñ–¥—Å—Ç—É–ø–∏, —Ä–∏—Ç–º —ñ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è",
    "–®—Ä–∏—Ñ—Ç–æ–≤—ñ –ø–∞—Ä–∏: Sans + Serif, –∫–µ–π—Å–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏",
    "–ï–∫—Å–ø–æ—Ä—Ç –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è Telegram, Instagram, Ads",
    "–ü–æ–±—É–¥–æ–≤–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ CTA —ñ –º—ñ–∫—Ä–æ—Ç–µ–∫—Å—Ç",
    "–¢—Ä–µ–Ω–¥–æ–≤—ñ —Å—Ç–∏–ª—ñ: –Ω–µ–æ–º–æ—Ä—Ñ—ñ–∑–º, –≥–ª–∞—Å—Å–º–æ—Ä—Ñ—ñ–∑–º, –ø–ª–æ—Å–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞",
    "–ú—ñ–∫—Ä–æ–∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ —è–∫ –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø –∂–∏–≤—ñ—à–∏–º",
    "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ —É Figma: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏, –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —Ç–æ–∫–µ–Ω–∏",
    "–°–∏—Å—Ç–µ–º–∞ —ñ–∫–æ–Ω–æ–∫: —Ç–æ–≤—â–∏–Ω–∞ –ª—ñ–Ω—ñ—ó, —Å—ñ—Ç–∫–∞, —É–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å",
    "UX-—Ç–µ–∫—Å—Ç–∏: —è–∫ –Ω–µ —Å–≤–∞—Ä–∏—Ç–∏—Å—è –∑ –∫–æ–ø—ñ—Ä–∞–π—Ç–µ—Ä–æ–º",
    "–ü—ñ–¥–±—ñ—Ä —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ñ–≤: —è–∫ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ—é",
    "–®–≤–∏–¥–∫—ñ –≥–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ —É Photoshop/Illustrator",
    "–ß–µ–∫–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∑–¥–∞—á–µ—é –º–∞–∫–µ—Ç—É: —â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏",
    "–ê–π–¥–µ–Ω—Ç–∏–∫–∞ –¥–ª—è –º–∞–ª–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É: —â–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—Ä–æ–±–∏—Ç–∏",
    "–ú–µ–º–∏ –ø—Ä–æ –¥–∏–∑–∞–π–Ω —ñ —è–∫ —ó—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∑ –∫—Ä—ñ–Ω–∂—É",
    "–§–∞–π–ª–æ–≤—ñ —Ñ–æ—Ä–º–∞—Ç–∏: –∫–æ–ª–∏ PNG/JPG/WEBP/SVG",
    "–ó–Ω–∏–∂–µ–Ω–Ω—è ¬´–≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —à—É–º—É¬ª: –º—ñ–Ω—ñ–º–∞–ª—ñ–∑–º –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ",
    "–ü—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑—å–∫–æ—Å—Ç—ñ, –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è",
    "–ó–∞–≥–æ–ª–æ–≤–∫–∏, –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞ –ª—ñ–Ω—ñ–π–∫–∞ —à—Ä–∏—Ñ—Ç—ñ–≤",
    "–ê/–ë —Ç–µ—Å—Ç–∏ –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤: —è–∫ —Ä–æ–±–∏—Ç–∏ —à–≤–∏–¥–∫–æ",
    "–ö–æ–ª—å–æ—Ä–æ–≤–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è —É –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å-–∫—Ä–µ–∞—Ç–∏–≤–∞—Ö",
    "–ë–∞–ª–∞–Ω—Å –º—ñ–∂ –±—Ä–µ–Ω–¥–æ–º —ñ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å–æ–º",
    "–®–∞–±–ª–æ–Ω–∏ –¥–ª—è —Å—Ç–æ—Ä—ñ–∑: —è–∫ –∑—Ä–æ–±–∏—Ç–∏, —â–æ–± –Ω–µ –≤–∏–≥–ª—è–¥–∞–ª–æ —à–∞–±–ª–æ–Ω–Ω–æ",
    "–ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±—Ä–∏—Ñ–æ–º —ñ —è–∫ —ó—Ö —É–Ω–∏–∫–∞—Ç–∏",
    "–§–æ—Ç–æ–±–∞–Ω–∫ vs. AI-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è: –¥–µ –º–µ–∂–∞",
    "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è moodboard: —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
    "–ö–ª—ñ–∫–±–µ–π—Ç–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ: –ø—Ä–∏–∫–ª–∞–¥–∏",
    "–¢–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞ –¥–ª—è –∫–∏—Ä–∏–ª–∏—Ü—ñ: –ø—ñ–¥–≤–æ–¥–Ω—ñ –∫–∞–º–µ–Ω—ñ",
    "–ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥—É–ª—å–Ω–∏—Ö —Å—ñ—Ç–æ–∫ –ø—ñ–¥ —Ä—ñ–∑–Ω—ñ –±–∞–Ω–µ—Ä–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏",
]

def kyiv_now():
    return dt.datetime.now(KYIV_TZ)

def kyiv_now_hhmm():
    return kyiv_now().strftime("%H:%M")

def kyiv_today_str():
    return kyiv_now().strftime("%Y-%m-%d")

def pick_image_slots_for_today():
    # Deterministic 3 slots each day based on date seed
    today = kyiv_today_str()
    rnd = random.Random(today)  # seed by date
    slots = SCHEDULE.copy()
    rnd.shuffle(slots)
    return set(slots[:IMAGES_PER_DAY])

def build_text_prompt(direction):
    return f"""
–¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç –∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω—É —Ç–∞ –∫—Ä–µ–∞—Ç–∏–≤—ñ–≤. –ù–∞–ø–∏—à–∏ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –ø–æ—Å—Ç —É –¥—Ä—É–∂–Ω—å–æ–º—É —Ç–æ–Ω—ñ –∑ –ª–µ–≥–∫–∏–º –≥—É–º–æ—Ä–æ–º (–±–µ–∑ –ø–µ—Ä–µ–±–æ—Ä—É) –Ω–∞ —Ç–µ–º—É: "{direction}".
–í–∏–º–æ–≥–∏:
- 90‚Äì160 —Å–ª—ñ–≤.
- 2‚Äì6 –¥–æ—Ä–µ—á–Ω–∏—Ö –µ–º–æ–¥–∑—ñ —É —Ç–µ–∫—Å—Ç—ñ.
- –ú–æ–∂–Ω–∞ —ñ–Ω–∫–æ–ª–∏ –∫–ª—ñ–∫–±–µ–π—Ç–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É (–∫–æ—Ä–æ—Ç–∫–∏–π —ñ —á—ñ–ø–∫–∏–π), –ø–æ—Ç—ñ–º ‚Äî —Ç–µ–∫—Å—Ç.
- –î–∞–π 1‚Äì3 –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∞–±–æ –º—ñ–Ω—ñ-–∞–ª–≥–æ—Ä–∏—Ç–º.
- –ë–µ–∑ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ/–∂–∞—Ä–≥–æ–Ω—É. –ö–æ—Ä–∏—Å—Ç—å —ñ –ø—Ä–∏–∫–ª–∞–¥–∏.
–§–æ—Ä–º–∞—Ç—É–π –∞–±–∑–∞—Ü–∞–º–∏.
""".strip()

def generate_text():
    direction = random.choice(TOPIC_DIRECTIONS)
    prompt = build_text_prompt(direction)
    try:
        resp = client().chat.completions.create(
            model=MODEL_NAME,
            messages=[{"role":"user","content":prompt}],
            temperature=0.8,
        )
        content = resp.choices[0].message.content.strip()
        return content, direction
    except Exception as e:
        print("‚ùå OpenAI text error:", e, flush=True)
        # fallback plain text to keep posting
        fallback = f"üé® –®–≤–∏–¥–∫–∞ –ø–æ—Ä–∞–¥–∞: —Ç—Ä–∏–º–∞–π –∫–æ–º–ø–æ–∑–∏—Ü—ñ—é —á–∏—Å—Ç–æ—é, –∞ CTA ‚Äî –ø–æ–º—ñ—Ç–Ω–∏–º. –í–∏—Ä—ñ–≤–Ω—é–π –∑–∞ —Å—ñ—Ç–∫–æ—é, –¥–∞–≤–∞–π –ø–æ–≤—ñ—Ç—Ä—è –≥–æ–ª–æ–≤–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–∞–º —ñ —Ç–µ—Å—Ç—É–π –¥–≤—ñ –≤–µ—Ä—Å—ñ—ó –∫–æ–ø—ñ—Ä–∞–π—Ç—É. üòâ"
        return fallback, direction

def build_image_prompt(direction, text):
    # Short English prompt, no text overlay
    return (
        "Minimalist clean flat illustration, modern product design style, "
        "subtle gradients, soft lighting, crisp edges, no text overlay. "
        f"Theme: {direction}. Visualize the design tip idea in a friendly way."
    )

def generate_image_bytes(direction, text):
    try:
        img_prompt = build_image_prompt(direction, text)
        resp = client().images.generate(
            model=IMAGE_MODEL,
            prompt=img_prompt,
            size="512x512",
            n=1,
            response_format="b64_json",
        )
        b64 = resp.data[0].b64_json
        return base64.b64decode(b64)
    except Exception as e:
        print("‚ö†Ô∏è OpenAI image error (will send text only):", e, flush=True)
        return None

def send_text(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {"chat_id": CHANNEL_ID, "text": text, "parse_mode": "HTML"}
    r = requests.post(url, data=data, timeout=60)
    if not r.ok:
        raise RuntimeError(f"Telegram error: {r.status_code} {r.text}")

def send_photo_with_caption(image_bytes, caption):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
    files = {"photo": ("img.png", image_bytes, "image/png")}
    data = {"chat_id": CHANNEL_ID, "caption": caption, "parse_mode": "HTML"}
    r = requests.post(url, data=data, files=files, timeout=60)
    if not r.ok:
        raise RuntimeError(f"Telegram error: {r.status_code} {r.text}")

def post_once(force_with_image=None):
    text, direction = generate_text()
    image_bytes = None
    if force_with_image:
        image_bytes = generate_image_bytes(direction, text)
    if image_bytes:
        send_photo_with_caption(image_bytes, text)
    else:
        send_text(text)

def main():
    if not BOT_TOKEN or not CHANNEL_ID or not OPENAI_KEY:
        print("‚ùå Missing env vars. Need BOT_TOKEN, CHANNEL_ID, OPENAI_KEY", flush=True)
        return

    print("üü¢ TG autoposter started (MIX 3/5 with images 512). Timezone: Europe/Kyiv", flush=True)
    print("‚è∞ Schedule:", SCHEDULE, flush=True)
    print("üì£ Channel:", CHANNEL_ID, flush=True)

    # Determine today's image slots
    img_slots = pick_image_slots_for_today()
    print("üñºÔ∏è Image slots today:", sorted(img_slots), flush=True)

    # Instant test post if requested
    if RUN_NOW:
        print("üöÄ RUN_NOW=1 ‚Äî sending a test post now...", flush=True)
        try:
            # For the test, send with image to verify pipeline
            post_once(force_with_image=True)
            print("‚úÖ Test post sent", flush=True)
        except Exception as e:
            print("‚ùå Test post failed:", e, flush=True)
        time.sleep(2)

    posted_slots = set()
    while True:
        try:
            now_hhmm = kyiv_now_hhmm()
            today = kyiv_today_str()
            slot_id = f"{today} {now_hhmm}"

            if now_hhmm in SCHEDULE and slot_id not in posted_slots:
                with_image = now_hhmm in img_slots
                print(f"[{slot_id}] Posting... with_image={with_image}", flush=True)
                text, direction = generate_text()
                image_bytes = generate_image_bytes(direction, text) if with_image else None
                if image_bytes:
                    send_photo_with_caption(image_bytes, text)
                else:
                    send_text(text)
                posted_slots.add(slot_id)
                print(f"[{slot_id}] Posted ‚úÖ", flush=True)
                time.sleep(65)
            else:
                time.sleep(5)
        except Exception as e:
            print("‚ö†Ô∏è Loop error:", e, flush=True)
            time.sleep(15)

def kyiv_now_hhmm():
    return dt.datetime.now(KYIV_TZ).strftime("%H:%M")

def kyiv_today_str():
    return dt.datetime.now(KYIV_TZ).strftime("%Y-%m-%d")

if __name__ == "__main__":
    main()
